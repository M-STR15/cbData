{
	"info": {
		"_postman_id": "d37489fd-bd15-43d7-8117-f1393d11e573",
		"name": "cbDataTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33210924"
	},
	"item": [
		{
			"name": "GET-api/v1/products/5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testuje, zda odpověď vrací status 200 (OK)\r",
							"pm.test(\"Status kód je 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testuje, zda odpověď je JSON\r",
							"pm.test(\"Odpověď je ve formátu JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Testuje, zda odpověď obsahuje požadované vlastnosti\r",
							"pm.test(\"Testuje, zda odpověď obsahuje požadované vlastnosti\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Ověří, že odpověď obsahuje požadované vlastnosti a nejsou null\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.not.null;\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\"); // Zkontroluje, že name je string\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.null;\r",
							"});\r",
							"\r",
							"// Odpověď obsahuje správná data\r",
							"pm.test(\"Odpověď obsahuje správná data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Ověření, že id je 5\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.equals(5);\r",
							"    \r",
							"    // Ověření, že name je \"Product 5\"\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.equals(\"Product 5\");\r",
							"    \r",
							"    // Ověření, že description je null\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.null;\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7246/api/v1/products/5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST-api/v1/products/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Odpověď má správný status kód\", function () {\r",
							"    pm.response.to.have.status(200); // Očekáváme status 200 OK\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď je ve formátu JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď obsahuje správná data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Ověřujeme, že id produktu není null nebo undefined\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.not.null.and.is.not.undefined;\r",
							"  \r",
							"    // Ověřujeme, že quantity není null nebo undefined a je číslo\r",
							"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\").that.is.not.null;\r",
							"    \r",
							"    // Ověřujeme správnost updateUtcDateTime\r",
							"    pm.expect(jsonData).to.have.property(\"updateUtcDateTime\").to.not.be.NaN;;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"productId\": 5,\r\n  \"quantity\": 100,\r\n  \"updateUtcDateTime\": \"2025-02-02T22:12:45.177Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7246/api/v1/products/orders",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT-api/v1/products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Odpověď má správný status kód\", function () {\r",
							"    pm.response.to.have.status(200); // Očekáváme status 200 OK\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď je ve formátu JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď obsahuje správná properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Ověření, že id je číselné a není null\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\").that.is.not.null;\r",
							"\r",
							"    // Ověření, že produkt má správné vlastnosti\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.not.null;\r",
							"    \r",
							"    // Ověření quantity\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\").that.is.not.null;\r",
							"\r",
							"    // Ověření správnosti updateUtcDateTime\r",
							"    pm.expect(jsonData).to.have.property(\"orders\").that.is.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď obsahuje správná data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"  // Ověření, že quantity je číslo, není null a rovná se 100\r",
							"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\").that.is.not.null;\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"productName\"));\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\").that.is.not.null;\r",
							"    pm.expect(jsonData.description).to.eql(\"Test\"); \r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\").that.is.not.null;\r",
							"    pm.expect(jsonData.id).to.eql(10); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Získání aktuálního data a formátování na požadovaný formát (např. \"yyyy-MM-dd_HH-mm-ss\")\r",
							"const currentDate = new Date().toISOString().replace(/[:.]/g, '-');\r",
							"\r",
							"// Vytvoření nového názvu produktu podle aktuálního data\r",
							"const newName = `Product_${currentDate}`;\r",
							"\r",
							"// Uložení hodnoty do Postman environment variable\r",
							"pm.environment.set(\"productName\", newName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"Test\",\r\n  \"id\": 10,\r\n  \"name\": \"{{productName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7246/api/v1/products",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT-api/v1/products/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Odpověď má správný status kód\", function () {\r",
							"    pm.response.to.have.status(200); // Očekáváme status 200 OK\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď je ve formátu JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď obsahuje správná properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Ověření, že id je číselné a není null\r",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\").that.is.not.null;\r",
							"\r",
							"    // Ověření, že produkt má správné vlastnosti\r",
							"    pm.expect(jsonData).to.have.property(\"product\").that.is.null;\r",
							"    \r",
							"    // Ověření quantity\r",
							"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\").that.is.not.null;\r",
							"\r",
							"    // Ověření správnosti updateUtcDateTime\r",
							"    pm.expect(jsonData).to.have.property(\"updateUtcDateTime\").that.is.not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Odpověď obsahuje správná data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"  // Ověření, že quantity je číslo, není null a rovná se 100\r",
							"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\").that.is.not.null;\r",
							"    pm.expect(jsonData.quantity).to.eql(200); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 200,\r\n  \"productId\": 5,\r\n  \"quantity\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7246/api/v1/products/orders",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Zátěžový test (script)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const baseUrl = \"https://localhost:7246/api/v1/products/\";\r",
							"const count = 99; // Počet URL, které chceme vygenerovat\r",
							"const startId = 1; // Počáteční ID produktu\r",
							"\r",
							"// Varianta s postupnými ID\r",
							"const urls = Array.from({ length: count }, (_, i) => `${baseUrl}${i + startId}`);\r",
							"\r",
							"const requests = urls.map(url => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        const startTime = new Date().getTime();\r",
							"        \r",
							"        pm.sendRequest({ url: url, method: \"GET\" }, (err, res) => {\r",
							"            const endTime = new Date().getTime();\r",
							"            const duration = endTime - startTime;\r",
							"\r",
							"            if (err) {\r",
							"                return reject({ url, error: err, duration });\r",
							"            }\r",
							"\r",
							"            // Zde můžeš přidat další podmínky pro různé chybové kódy\r",
							"            if (res.code >= 400 && res.code < 500) {\r",
							"                reject({ url, error: `Client error: ${res.code}`, duration });\r",
							"            } else if (res.code >= 500) {\r",
							"                reject({ url, error: `Server error: ${res.code}`, duration });\r",
							"            }\r",
							"\r",
							"            resolve({ url, status: res.code, duration });\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"Promise.allSettled(requests)\r",
							"    .then(results => {\r",
							"        let summary = {\r",
							"            under100ms: 0,\r",
							"            under200ms: 0,\r",
							"            under300ms: 0,\r",
							"            under500ms: 0,\r",
							"            under1000ms: 0,\r",
							"            over1000ms: 0,\r",
							"            clientErrors: 0,\r",
							"            serverErrors: 0\r",
							"        };\r",
							"\r",
							"        results.forEach(result => {\r",
							"            if (result.status === \"fulfilled\") {\r",
							"                let duration = result.value.duration;\r",
							"\r",
							"                     if (duration < 100) summary.under100ms++;\r",
							"                else if (duration < 200) summary.under200ms++;\r",
							"                else if (duration < 300) summary.under300ms++;\r",
							"                else if (duration < 500) summary.under500ms++;\r",
							"                else if (duration < 1000) summary.under1000ms++;\r",
							"                else summary.over1000ms++;\r",
							"\r",
							"                pm.test(`✅ ${result.value.url} - OK (${duration} ms)`, () => {\r",
							"                    pm.expect(result.value.status).to.eql(200);\r",
							"                });\r",
							"            } else {\r",
							"                const error = result.reason;\r",
							"                if (error.error.startsWith('Client error')) {\r",
							"                    summary.clientErrors++;\r",
							"                    pm.test(`❌ ${error.url} - Client Error (${error.error})`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro client error\r",
							"                    });\r",
							"                } else if (error.error.startsWith('Server error')) {\r",
							"                    summary.serverErrors++;\r",
							"                    pm.test(`❌ ${error.url} - Server Error (${error.error})`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro server error\r",
							"                    });\r",
							"                } else {\r",
							"                    summary.over1000ms++; // Timeout nebo jiná chyba\r",
							"                    pm.test(`❌ ${error.url} - Error (Timeout or Unknown)`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro timeout\r",
							"                    });\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"\r",
							"        // Nahrazení console.table() pomocí console.log()\r",
							"        console.log(\"📊 **Souhrnná statistika:**\");\r",
							"        console.log(`✅ Do 100ms: ${summary.under100ms}`);\r",
							"        console.log(`✅ Do 200ms: ${summary.under200ms}`);\r",
							"        console.log(`✅ Do 300ms: ${summary.under300ms}`);\r",
							"        console.log(`✅ Do 500ms: ${summary.under500ms}`);\r",
							"        console.log(`✅ Do 1000ms: ${summary.under1000ms}`);\r",
							"        console.log(`❌ Nad 1000ms: ${summary.over1000ms}`);\r",
							"        console.log(`❌ Klientské chyby (4xx): ${summary.clientErrors}`);\r",
							"        console.log(`❌ Serverové chyby (5xx): ${summary.serverErrors}`);\r",
							"\r",
							"        pm.test(\"📊 Souhrnná statistika\", () => {\r",
							"            pm.expect(summary.over1000ms).to.be.lessThan(urls.length); // Pokud všechny timeoutují, test failne\r",
							"        });\r",
							"    })\r",
							"    .catch(err => console.error(\"❌ Chyba při zpracování requestů:\", err));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7246/api/v1/products/6",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Zátěžový test (script)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const baseUrl = \"https://localhost:7246/api/v1/products/orders-without-answer\";\r",
							"const count = 10; // Počet URL, které chceme vygenerovat\r",
							"const startId = 1; // Počáteční ID produktu\r",
							"\r",
							"// Varianta s postupnými ID\r",
							"const urls = Array.from({ length: count }, () => baseUrl);\r",
							"\r",
							"const requests = urls.map((url, i) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        const startTime = new Date().getTime();\r",
							"\r",
							"        // Tělo POST požadavku, například nějaké data\r",
							"        const body = JSON.stringify({\r",
							"            \"productId\": i + startId,\r",
							"            \"quantity\": 0\r",
							"        });\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: url,\r",
							"            method: \"POST\",\r",
							"            header: {\r",
							"                \"Content-Type\": \"application/json\" // Pokud odesíláte JSON data\r",
							"            },\r",
							"            body: body\r",
							"        }, (err, res) => {\r",
							"            const endTime = new Date().getTime();\r",
							"            const duration = endTime - startTime;\r",
							"\r",
							"            if (err) {\r",
							"                return reject({ url, error: err.message || \"Unknown error\", duration });\r",
							"            }\r",
							"\r",
							"            // Zde můžeš přidat další podmínky pro různé chybové kódy\r",
							"            if (res.code >= 400 && res.code < 500) {\r",
							"                return reject({ url, error: `Client error: ${res.code}`, duration });\r",
							"            } else if (res.code >= 500) {\r",
							"                return reject({ url, error: `Server error: ${res.code}`, duration });\r",
							"            }\r",
							"\r",
							"            resolve({ url, status: res.code, duration });\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"Promise.allSettled(requests)\r",
							"    .then(results => {\r",
							"        let summary = {\r",
							"            under200ms: 0,\r",
							"            under300ms: 0,\r",
							"            under500ms: 0,\r",
							"            under1000ms: 0,\r",
							"            over1000ms: 0,\r",
							"            clientErrors: 0,\r",
							"            serverErrors: 0\r",
							"        };\r",
							"\r",
							"        results.forEach(result => {\r",
							"            if (result.status === \"fulfilled\") {\r",
							"                let duration = result.value.duration;\r",
							"\r",
							"                if (duration < 200) summary.under200ms++;\r",
							"                else if (duration < 300) summary.under300ms++;\r",
							"                else if (duration < 500) summary.under500ms++;\r",
							"                else if (duration < 1000) summary.under1000ms++;\r",
							"                else summary.over1000ms++;\r",
							"\r",
							"                pm.test(`✅ ${result.value.url} - OK (${duration} ms)`, () => {\r",
							"                    pm.expect(result.value.status).to.eql(200);\r",
							"                });\r",
							"            } else {\r",
							"                const error = result.reason;\r",
							"                const errorMessage = error.error || \"Unknown error\";\r",
							"\r",
							"                if (typeof errorMessage === \"string\" && errorMessage.startsWith('Client error')) {\r",
							"                    summary.clientErrors++;\r",
							"                    pm.test(`❌ ${error.url} - Client Error (${errorMessage})`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro client error\r",
							"                    });\r",
							"                } else if (typeof errorMessage === \"string\" && errorMessage.startsWith('Server error')) {\r",
							"                    summary.serverErrors++;\r",
							"                    pm.test(`❌ ${error.url} - Server Error (${errorMessage})`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro server error\r",
							"                    });\r",
							"                } else {\r",
							"                    summary.over1000ms++; // Timeout nebo jiná chyba\r",
							"                    console.error(`❌ ${error.url} - Neznámá chyba:`, error); // Logujeme celý error objekt\r",
							"                    pm.test(`❌ ${error.url} - Error (Timeout or Unknown)`, () => {\r",
							"                        pm.expect(false).to.be.true; // Umělý fail testu pro timeout\r",
							"                    });\r",
							"                }\r",
							"            }\r",
							"        });\r",
							"\r",
							"        console.log(\"📊 **Souhrnná statistika:**\");\r",
							"        console.log(`✅ Do 200ms: ${summary.under200ms}`);\r",
							"        console.log(`✅ Do 300ms: ${summary.under300ms}`);\r",
							"        console.log(`✅ Do 500ms: ${summary.under500ms}`);\r",
							"        console.log(`✅ Do 1000ms: ${summary.under1000ms}`);\r",
							"        console.log(`❌ Nad 1000ms: ${summary.over1000ms}`);\r",
							"        console.log(`❌ Klientské chyby (4xx): ${summary.clientErrors}`);\r",
							"        console.log(`❌ Serverové chyby (5xx): ${summary.serverErrors}`);\r",
							"\r",
							"        pm.test(\"📊 Souhrnná statistika\", () => {\r",
							"            pm.expect(summary.over1000ms).to.be.lessThan(urls.length); // Pokud všechny timeoutují, test failne\r",
							"        });\r",
							"    })\r",
							"    .catch(err => console.error(\"❌ Chyba při zpracování request:\", err));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"productId\": 2,\r\n            \"quantity\": 0\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7246/api/v1/products/orders-without-answer",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7246",
					"path": [
						"api",
						"v1",
						"products",
						"orders-without-answer"
					]
				}
			},
			"response": []
		}
	]
}